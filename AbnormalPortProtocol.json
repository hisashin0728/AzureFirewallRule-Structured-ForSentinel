{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/f1267009-016f-4197-9cf2-f72959aa5984')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/f1267009-016f-4197-9cf2-f72959aa5984')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "Abnormal Port to Protocol",
                "description": "Identifies communication for well known protocol over a non-standard port based on learning period activity. This can indicate malicious communication (C2) or exfiltration by attackers trying to communicate over known ports (22:SSH, 80:HTTP) but dont use the known protocol headers to match the port number.\n\nConfigurable Parameters:\n\n- Learning period time - learning period for protocol learning in days. Default is set to 7.",
                "severity": "Medium",
                "enabled": false,
                "query": "  let LearningPeriod = 7d;\n  let RunTime = 1d;\n  let StartLearningPeriod = LearningPeriod + RunTime;\n  let EndRunTime = RunTime - 1d;\n  let LearningPortToProtocol1 =  (AzureDiagnostics\n  | where OperationName == \"AzureFirewallApplicationRuleLog\"\n  | where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime))\n  | parse msg_s with Protocol \" request from \" SourceIp \":\" SourcePort:int \" to \" Fqdn \":\" DestinationPort:int \".\" *\n  | where isnotempty(DestinationPort)\n  | summarize LearningTimeCount = count() by LearningTimeDstPort = DestinationPort, LearningTimeProtocol = Protocol, SourceIp, Fqdn);\n  let LearningPortToProtocol2 = (AZFWNetworkRule\n  | where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime))\n  | where isnotempty(DestinationPort)\n  | extend Fqdn = DestinationIp\n  | summarize LearningTimeCount = count() by LearningTimeDstPort = DestinationPort, LearningTimeProtocol = Protocol, SourceIp, Fqdn);\n  let LearningPortToProtocol3 = (AZFWApplicationRule\n  | where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime))\n  | where isnotempty(DestinationPort)\n  | summarize LearningTimeCount = count() by LearningTimeDstPort = DestinationPort, LearningTimeProtocol = Protocol, SourceIp, Fqdn);\n  let AlertTimePortToProtocol1 = (AzureDiagnostics\n  | where TimeGenerated between (ago(RunTime) .. ago(EndRunTime))\n  | where OperationName == \"AzureFirewallApplicationRuleLog\"\n  | parse msg_s with Protocol \" request from \" SourceIp \":\" SourcePort \" to \" Fqdn \":\" DestinationPort:int \".\" *\n  | where isnotempty(DestinationPort)\n  | summarize AlertTimeCount = count() by AlertTimeDstPort = DestinationPort, AlertTimeProtocol = Protocol);\n  let AlertTimePortToProtocol2 = (AZFWNetworkRule\n  | where TimeGenerated between (ago(RunTime) .. ago(EndRunTime))\n  | where isnotempty(DestinationPort)\n  | extend Fqdn = DestinationIp\n  | summarize AlertTimeCount = count() by AlertTimeDstPort = DestinationPort, AlertTimeProtocol = Protocol);\n  let AlertTimePortToProtocol3 = (AZFWApplicationRule\n  | where TimeGenerated between (ago(RunTime) .. ago(EndRunTime))\n  | where isnotempty(DestinationPort)\n  | summarize AlertTimeCount = count() by AlertTimeDstPort = DestinationPort, AlertTimeProtocol = Protocol);\n  (union isfuzzy=true \n  (AlertTimePortToProtocol1 \n  | join kind=leftouter (LearningPortToProtocol1) on $left.AlertTimeDstPort == $right.LearningTimeDstPort\n  | where LearningTimeProtocol != AlertTimeProtocol and LearningTimeDstPort != AlertTimeDstPort),\n  (AlertTimePortToProtocol2 \n  | join kind=leftouter (LearningPortToProtocol2) on $left.AlertTimeDstPort == $right.LearningTimeDstPort\n  | where LearningTimeProtocol != AlertTimeProtocol and LearningTimeDstPort != AlertTimeDstPort),\n  (AlertTimePortToProtocol3 \n  | join kind=leftouter (LearningPortToProtocol3) on $left.AlertTimeDstPort == $right.LearningTimeDstPort\n  | where LearningTimeProtocol != AlertTimeProtocol and LearningTimeDstPort != AlertTimeDstPort))",
                "queryFrequency": "PT1H",
                "queryPeriod": "P8D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 1,
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "DefenseEvasion",
                    "Exfiltration",
                    "CommandAndControl"
                ],
                "techniques": [],
                "alertRuleTemplateName": "826f930c-2f25-4508-8e75-a95b809a4e15",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "SourceIp"
                            }
                        ]
                    },
                    {
                        "entityType": "URL",
                        "fieldMappings": [
                            {
                                "identifier": "Url",
                                "columnName": "Fqdn"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "1.0.0"
            }
        }
    ]
}